% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TeaSetClass.R
\docType{class}
\name{TeaSet-class}
\alias{TeaSet-class}
\alias{TeaSet}
\title{TeaSet class}
\description{
This class and accompanying functions are designed to help with the creation of ternary graphs and the manipulatoin of ternary data.  The class uses snake_names for functions and methods, camel-case for variables, and Pascal Case for everything else.  For graphical methods and functions, I have tried to emulate similar functions' parameter names.
}
\section{Fields}{

\describe{
\item{\code{myCoord}}{a numeric matrix}

\item{\code{myCenter}}{a numeric list of xy-coordinates}

\item{\code{myStretch}}{a numeric list of length two}

\item{\code{myIJK}}{a numeric matrix, dimensions 4X2, i is first and last}
}}

\section{Methods}{

\describe{
\item{\code{get_ijk(raw = FALSE, inplace = FALSE)}}{Returns myIJK. If raw=TRUE, returns default ijk-vectors. If inplace=TRUE, recalculates myIJK or sets myIJK to default values.}

\item{\code{get_leaf(data)}}{Given t-coordinates, returns what section of the t-plot they are in.}

\item{\code{get_xy(data = myCoord)}}{Given t-coordinates, returns xy-coordinates. Defaults to myCoord.}

\item{\code{initialize(data_ = NA, columns_ = c(1, 2, 3), center_ = NA,
  xFrame_ = NA, yFrame_ = NA)}}{Initializes a TeaSet object, used when TeaSet$new() is called.  No arguments necessary.}

\item{\code{p_center_frame(xFrame, yFrame, inplace = FALSE)}}{Private method. Returns center of xFrame and yFrame.  If inplace=TRUE, sets myCenter<<-center}

\item{\code{p_color_center(xy, ...)}}{Private method. Works with tea_plot to extract col variable from ..., and handle gradient and contrast colors.}

\item{\code{p_normalize_ternary_pt(x = myCoord)}}{Private method. For each ternary point, calls p_redistribute negatives, than divides all by their max value.}

\item{\code{p_plot(..., alpha)}}{private function, removes variables after ... before calling its namesake}

\item{\code{p_points(..., alpha)}}{private function, removes variables after ... before calling its namesake}

\item{\code{p_polygon(..., alpha)}}{private function, removes variables after ... before calling its namesake}

\item{\code{p_redistribute_negatives(x = myCoord)}}{Private method. Given ternary-coordinates, redistributes negative values for each axis to the other two axes as half their value.}

\item{\code{p_section_key(x = NULL)}}{Private method.  Given a list, returns a list with names set to section names}

\item{\code{p_segments(..., alpha)}}{private function, removes variables after ... before calling its namesake}

\item{\code{p_size_frame(xFrame = NA, yFrame = NA, inplace = FALSE)}}{Private method. Returns the difference between xy-values of xFrame and yFrame.  If inplace=TRUE, sets myStretch<<-newStretch}

\item{\code{p_text(..., alpha)}}{private function, removes variables after ... before calling its namesake}

\item{\code{tea_contrast_colorize(x = myCoord, alpha = 0.3)}}{Returns a list of colors based on sections of provided t-points.}

\item{\code{tea_frame_plot(...)}}{Draws the border triangle around a t-plot.  May also provide a color to shade the background}

\item{\code{tea_gradient_background(rows = 30, border = NA, alpha = 0.1, ...)}}{Creates a gradient of colors in the background of a t-plot. The more rows (of triangles), the finer the gradient.}

\item{\code{tea_gradient_colorize(x = myCoord, alpha = 0.3)}}{Returns a list of colors for t-points based on their locations within t-plot}

\item{\code{tea_label_axes(axis.labels = "default")}}{Labels the axes of a t-plot}

\item{\code{tea_lines(x = NULL, y = NULL, z = NULL, draw = TRUE,
  overDraw = c(FALSE, FALSE), col = "grey", ...)}}{Draws a line given a single value along one of the ternary axes.  Points should be from 0-1. Works wtih lists of points. Overdraw makes the line go slightly over the border triangle.}

\item{\code{tea_plot(data = myCoord, dataLabels = NA, main = "", newPlot = TRUE,
  bullseye = FALSE, ticks = NA, axis.labels = "default",
  col.axis = "grey", ...)}}{Creates a t-plot.  If newPlot=FALSE, will instead draw atop current plot.}

\item{\code{tea_ticks(axes = 4, col.axis = "grey")}}{Draws tick-lines for all three axes and labels them.}

\item{\code{tea_triangle(r = 1, xy = myCenter, jCorner = FALSE, raw = FALSE,
  draw = TRUE, recursing = FALSE, col = "gradient", alpha = 0.3, ...)}}{Creates triangle similar to the triangle around the t-plot. r is its size relative to the border-triangle, and xy is its center.  If jCorner=TRUE, instead draws from the j-vector's corner.}

\item{\code{tea_xy_gradient_colorize(x, alpha = 0.3, rotate_hue = 0, raw = FALSE)}}{Returns a list of colors for xy-points based on their locations within t-plot}
}}

\note{
allows for blank class to be built
}
\examples{
  \dontrun{testData <- matrix(c(rnorm(300)),ncol=3)
           teaSet   <- TeaSet$new(testData)}

}
